# We need to give all objects some built in fields and methods so we 
# modify the object class here. 
class Object

	attr_accessor :policy_object, :violation_object
   def populate_policies
	end 	

        def policy_object
          return @policy_object if !@policy_object.nil?
          cls = self.class
          if cls.respond_to?("superclass")
            if cls.superclass == ActiveRecord::Base
              return cls.policy_object
            end
          end
          return nil
        end

	def assign_policy(policy_type, function, target=:self)
                puts "Here is the Target: #{self.inspect}"
                @policy_object = {} if policy_object.nil?
		@policy_object[policy_type] = function
	end

	def assign_violation(policy_type, violation, target=:self)
		@violation_object = {} if violation_object.nil?
		@violation_object[policy_type] = function
	end

	def eval_policy(policy_type)
		return true if policy_object.nil?
		function = policy_object[policy_type]
		return true if function.nil?				
		eval(function).call(Thread.current[:user])				
	end

	def eval_violation(policy_type)
		return if violation_object.nil?
		function = violation_object[policy_type]
		return if function.nil?				
		eval(function).call(Thread.current[:user])				
	end

	def gr_is_visible?(transparent=false)
		return true if eval_policy(:read_access)
		eval_violation(:read_access) unless transparent
	end

	def gr_can_edit?(transparent=false)
		return true if eval_policy(:write_access)
		eval_violation(:write_access) unless transparent
	end

	def gr_can_create?(transparent=false)
		return true if eval_policy(:create_access)
		eval_violation(:create_access) unless transparent
	end

	def gr_can_destroy?(transparent=false)
		return true if eval_policy(:delete_access)
		eval_violation(:delete_access) unless transparent
	end

	# Alias all the object's getters and setters to check write policies
	def gr_policy_setup       
          puts "#{self}"
          begin
          define_attribute_methods
            puts "methods defined"
          rescue
            puts "methods NOT defined"
          end      
          if self.respond_to?("reflections")
            for var in reflections.keys do                  
              puts "****Setting up #{var}"
              #var = var[1..-1]
              
              next if var == :policy_object or var == :violation_object
              d = defined?("#{var}")
              puts "Defined? #{d}"
              puts "alias :old_#{var}= :#{var}="
              puts "alias :old_#{var} :#{var}"
              self.class_eval("alias :old_#{var}= :#{var}=")
#              puts "define_method (:#{var}=) do |val|
#						target = old_#{var}
#						return if target.nil?		
#						return old_#{var}=(val) if gr_can_edit? and target.gr_can_edit?
#					end"
#              self.class_eval("define_method(:#{var}=) do |val|
#						target = old_#{var}
#						return if target.nil?		
#						return old_#{var}=(val) if gr_can_edit? and target.gr_can_edit?
#					end")
              
              self.class_eval("alias :old_#{var} :#{var}")
 #             self.class_eval("define_method(:#{var}) do
#puts 'modified access'
#						target = old_#{var}
#						return if target.nil?
#                                                if target.is_a?(Array)
#                                                     target = visible_array(target)
#                                                end
#						return target if target.gr_is_visible? 
#					end")
            end
          end
	end
      end

