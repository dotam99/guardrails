SETUP- FIRST APP
	To prepare your first GuardRails application, follow these steps:
		1.  Create a new Rails application as you would any Rails application in the RawApps directory of the GaurdRails package OR move your current Rails project folder into the RawApps directory.
		2.  Go to RawApps/yourApp/config.  Copy the template "config.gr" from the root of the GuardRails package and place them here.  In this file, there is a method "return_user" which must be defined to return a reference to the user object that will be passed to the access control policies.
		3.  To test your setup, in the root of the GuardRails package, execute the "run.sh" shell script, passing in the name of the folder containing your application in the RawApps directory: 

		~$ ./run.sh yourApp

The new application can be found in the "ProdApps" folder.  In the new application, run the command "rake db:schema:load" to add support for taint tracking to your database.  Note that migrations should not be run in the "ProdApps" folder, only in "RawApps" folder.  You should now be able to launch your applicatoin as though you had deployed the Rails version, but will automatically deploy the updated GaurdRails String library modifications, protecting your application from most injection attacks.

ANNOTATIONS- AN INTRODUCTION
	GuardRails requires you to formally present your security policies via annotations in model folders of the data your wish to protect.  We assume here that you already have a basic grasp of how to use the Ruby on Rails framework.
		Go to your project in the RawApps folder and navigate to your User model file.  At the top of this file, specify a basic basic policy by typing this above the first line of code (i.e. class User):

		# @ :read_access, lambda { |user| not user.nil? }

		Run your GuardRails application again the same way as before.  This process parses your code, looking for annotations, and applies them.  (If your project is ever unchanged and you wish to run it again, you can do so by running GuardRails/ProdApps/yourApp/script/server.  However, to edit your application, we strongly recommend that you edit the version in your RawApps folder and then rerun the GaurdRails transformation.)  If your application previously allowed unauthenticated users to view any information about any users, your application will now throw a GuardRails Exception when trying to bring up the page.  This means that GuardRails is now protecting data as specified by the policy!
		GuardRails policies have three parts: policy type, policy targets, and the policy itself as a lmbda expression.  In this example, we are restricting the readability of data, the policy targets are omitted here which causes GaurdRails to apply them to the next reasonable target- the entire model, and lambda expression uses the current users authentication information (as supplied by the pass_user function in your project's config.gr file) to test if the user is logged in or not.  Here, we assume that an unauthenticated user results in the current user being tracked as a NIL object, but this check can be manually editted to suit your implementation.
		The three parts of a GuardRails annotation are delimited by commas.  Annotations begin with a "# @", which would comment out these lines if you wanted to convert this application back to a regular Rails application.  The lambda expression should return true if and only if the current user should be granted the specified access to the specified data and false at all other times.  The set of recognized access types are: read_access, write_access, append_access, create_access, delete_access.  Creation and deletion refer to making or destroying instances of the object as a whole.  
		You may also specify target data fields which are stored in your database to be protected by your annotation, though you may alternatively just place the annotation immediately before the variables declaration.  An annotation with targets might look like this:

		# @ :append_access, :user_list, lambda { |user| not user.nil? }

		In this case, a logged in user would be able to add new entries to the arrays "user_list", but not modify the list in any other way.

FAILING GRACEFULLY (More support in next release)
POLICY EXCEPTIONS (More support in next release)
