class StringTests
  @@s1 = "abcde"
  @@s2 = "zyxwv"
  begin
    @@q1 = @@s1.to_qstring
    @@q2 = @@s2.to_qstring   
  rescue 
    @@q1 = @@s1
    @@q2 = @@s2
  end
  @@test_count = 0
  @@passes = 0
  @@failures = 0
  @@errors = 0  
  def self.run
    @@test_count = 0
    @@passes = 0
    @@failures = 0
    @@errors = 0        
    self.methods.each do |m|
      if m.to_s.index("test") != nil
        puts "Running #{m.to_s}:"
        self.send(m.to_s)
        puts "-----------------------------"
      end
    end
    puts "Results:"
    puts "Sucesses: #{@@passes}/#{@@test_count}   Failures: #{@@failures}/#{@@test_count}"
    return @@passes == @@test_count
  end
  def self.test_concatenation
    self.assert(@@s1 + @@s2, "abcdezyxwv")
    self.assert(@@s2 + @@s1, "zyxwvabcde")
  end
  def self.test_slice
    a = "hello there".t
    if String.version[1] < 9
      self.assert(a[1],101)
    else
      self.assert(a[1],"e")
    end
    self.assert(a[1,3],"ell")
    self.assert(a[1..3],"ell")
    self.assert(a[-3,2],"er")
    self.assert(a[-4..-2],"her")
    self.assert(a[12..-1],nil)
    self.assert(a[-2..-4],"")
    self.assert(a[/[aeiou](.)\1/],"ell")
    self.assert(a[/[aeiou](.)\1/,0],"ell")
    self.assert(a[/[aeiou](.)\1/,1],"l")
    self.assert(a[/[aeiou](.)\1/,2],nil)
    self.assert(a["lo"],"lo")
    self.assert(a["bye"],nil)
  end
  def self.test_scan
    a = "cruel world".t
    self.assert(a.scan(/\w+/),["cruel","world"])
    self.assert(a.scan(/.../),["cru", "el ", "wor"])
    self.assert(a.scan(/(...)/),[["cru"], ["el "],["wor"]])
    self.assert(a.scan(/(..)(..)/),[["cr","ue"],["l ", "wo"]])
  end
  def self.test_gsub
    a = "hello".t
    self.assert(a.gsub(/[aeiou]/, '*'),"h*ll*")
    self.assert(a.gsub(/([aeiou])/, '<\1>'),"h<e>ll<o>")
    if String.version[1] >= 9
      self.assert(a.gsub(/./) {|s| s[0].ord.to_s + ' '} , "104 101 108 108 111 ")
      self.assert(a.gsub(Regexp.new("(?<foo>[aeiou])"), '{\k<foo>}'),"h{e}ll{o}")
    end
  end
  def self.test_sub
    a = "hello".t
    self.assert(a.sub(/[aeiou]/, '*'),"h*llo")
    self.assert(a.sub(/([aeiou])/, '<\1>'),"h<e>llo")
    if String.version[1] >= 9
      self.assert(a.sub(/./) {|s| s[0].ord.to_s + ' '} , "104 ello")
      self.assert(a.sub(Regexp.new("(?<foo>[aeiou])"), '*\k<foo>*'),"h*e*llo")
    end
  end
  def self.test_split
    self.assert(" now's  the time".t.split,["now's","the","time"])
    self.assert(" now's  the time".t.split(' '),["now's","the","time"])
    self.assert(" now's  the time".t.split(/ /),["", "now's", "", "the","time"])
    self.assert("1, 2.34,56, 7".t.split(%r{,\s*}), ["1","2.34", "56","7"])
    self.assert("hello".t.split(//), ["h", "e", "l", "l", "o"])
    self.assert("hello".t.split(//,3), ["h", "e", "llo"])
    self.assert("hi mom".t.split(%r{\s*}), ["h", "i", "m", "o", "m"])
    self.assert("mellow yellow".t.split("ello"),["m", "w y", "w"])
    self.assert("1,2,,3,4,,".t.split(','),["1","2","","3","4"])
    self.assert("1,2,,3,4,,".t.split(',',4),["1","2","","3,4,,"])
    self.assert("1,2,,3,4,,".t.split(',',-4),["1","2","","3","4","",""])
  end
  def self.test_tr
    self.assert("hello".t.tr('aeiou','*'),"h*ll*")
    self.assert("hello".t.tr('^aeiou','*'),"*e**o")
    self.assert("hello".t.tr('el','ip'),"hippo")
    self.assert("hello".t.tr('a-y','b-z'),"ifmmp")
  end
  def self.test_delete
    self.assert("hello".t.delete("l", "lo"),"heo")
    self.assert("hello".t.delete("lo"),"he")
    self.assert("hello".t.delete("aeiou", "^e"),"hell")
    self.assert("hello".t.delete("ej-m"),"ho")
  end
  def self.test_chop
    self.assert(@@s1.chop, "abcd")
    self.assert(@@s1.chop.chop.chop, "ab")
    self.assert(@@q1.chop, "abcd".to_qstring)
    self.assert(@@q1.chop.chop.chop, "ab".to_qstring)
  end
  def self.test_fuzz
    for n in (0..20)
      self.random_compare
    end
    for n in (0..10)
      self.random_compare2
    end
  end
  def self.big_fuzz
    for n in (0..200)
      self.random_compare
    end
    for n in (0..100)
      self.random_compare2
    end
  end
  def self.run_long
    @@test_count = 0
    @@passes = 0
    @@failures = 0
    @@errors = 0        
    self.big_fuzz
    puts "Results:"
    puts "Sucesses: #{@@passes}/#{@@test_count}   Failures: #{@@failures}/#{@@test_count}"
    return @@passes == @@test_count
  end
  def self.random_compare
    smethods = ["upcase","upcase!","downcase","downcase!","swapcase","swapcase!","capitalize","capitalize!", "chop","chop!","chomp","chomp!","squeeze","squeeze!","succ","succ!","next","next!","lstrip","strip","rstrip", "reverse", "reverse!", "dump", "chr"]
    m = smethods[rand(smethods.length)]
    str = self.random_string
    tstr = str.clone.t
    print m.ljust(20)
    print str.ljust(10)
    self.assert(str.send(m),tstr.send(m))    
  end
  def self.random_compare2
    smethods = [["ljust", lambda {rand(18)}],["center", lambda {rand(18)}],["rjust", lambda {rand(18)}],["slice", lambda {rand(8)}], ["slice", lambda {-1}]]
    m = smethods[rand(smethods.length)]
    str = self.random_string
    tstr = str.clone.t
    print m[0].ljust(20)
    print str.ljust(10)
    param = m[1].call
    self.assert(str.send(m[0],param),tstr.send(m[0],param))    
  end
  def self.random_string(len = 8)
    new_string = ""
    while new_string.length<len
      new_string += (rand(94)+32).chr      
    end
    return new_string
  end
  def self.assert(v1,v2)

    @@test_count += 1
    begin
      result = (v1 == v2)
      puts "#{v1} == #{v2}".ljust(20) + " -> #{v1 == v2}"
      if result
        @@passes += 1
      else
        @@failures += 1
      end
    rescue
        @@errors += 1
    end
  end
end
